rm(list = ls())
setwd("D:/Certificates/Data Science/Edwisor/Project 2")
# #loading Libraries
x = c("Hmisc" , "mice" , "factoextra" , "devtools" , "ggthemes" , "plotly" , "htmlwidgets" , "GGally" , "tidyr" , "ggplot2", "corrgram", "DMwR", "usdm", "caret", "randomForest", "e1071",
"DataCombine", "doSNOW", "inTrees", "rpart.plot", "rpart","MASS","xgboos","stats","dplyr")
#load Packages
lapply(x, require, character.only = TRUE)
install.packages("Xgboss")
install.packages("xgboost")
#load Packages
lapply(x, require, character.only = TRUE)
rm(x)
# loading datasets
ccs = read.csv("credit-card-data.csv", header = T, na.strings = c(" ", "", "NA"))
setwd("D:/Certificates/Data Science/Edwisor/Project 2/Credit Card Sigmentation")
# loading datasets
ccs = read.csv("credit-card-data.csv", header = T,na.strings = c(" ", "", "NA"))
================================#Exploratory Data Analysis#===============================
# Structure of data
str(ccs)
summary(ccs)
head(ccs)
tail(ccs)
tail(ccs)
names(ccs)
================================#Missing Value Analysis#=================================
# We need to check the Missing values and if there are any we have to subsequently drop the missing values for better results
missing_val = data.frame(apply(ccs,2,function(x){sum(is.na(x))}))
missing_val$Columns = row.names(missing_val)
names(missing_val)[1] =  "Missing_percentage"
missing_val$Missing_percentage = (missing_val$Missing_percentage/nrow(ccs)) * 100
missing_val = missing_val[order(-missing_val$Missing_percentage),]
row.names(missing_val) = NULL
missing_val = missing_val[,c(2,1)]
missing_val
complete.cases(ccs)
which(complete.cases(ccs))
which(!complete.cases(ccs))
ccs_na = which(!complete.cases(ccs))
ccs_new = ccs[-ccs_na,]
ccs_new
================================#Feature Selection#=======================================
#We will take out the CUST_ID since it was a unique variable and we can't get further information from it.
#The scale on most of the variables is different, but before scale it, we will take a closer look at the data, we will deal with the scaling at PCA Session.
ccs_new <- ccs_new %>%
select(-CUST_ID) %>%
drop_na()
head(ccs_new,10)
================================#Data Exploration#========================================
#Corelation between variables
ggcorr(ccs_new,
label = T,
label_size = 3,
label_round = 2,
hjust = 1,
size = 3,
color = "royalblue",
layout.exp = 5,
low = "dodgerblue",
mid = "gray95",
high = "red2",
name = "Correlation")
===============================#Data Distribution#========================================
#We have to see whether there is some interesting finding on the data distribution, especially on Balance, Purchase, Credit Limit, and Tenure.
#Customer Balance
plot1 =  ggplot(ccs_new, aes(x=BALANCE)) +
geom_histogram(col = "cyan", fill = "dodgerblue", bins = 30) +
labs(x = "Balance", y = "Frequency", title = "Histogram of Customer Balance") +
theme_igray()
ggplotly(plot1)
plot2 = ggplot(ccs_new, aes(x=PURCHASES)) +
geom_histogram(col = "lawngreen", fill = "springgreen4", bins = 40) +
labs(x = "Purchase", y = "Frequency", title = "Histogram of Customer Purchase") +
theme_igray()
ggplotly(plot2)
ggplotly(plot3)
plot3 = ggplot(ccs_new, aes(x=CREDIT_LIMIT)) +
geom_histogram(col = "yellow2", fill = "orangered2", bins = 30) +
labs(x = "Credit Limit", y = "Frequency", title = "Histogram of Credit Limit") +
theme_igray()
ggplotly(plot3)
plot4 =  ggplot(ccs_new, aes(x=TENURE)) +
geom_bar(col = "magenta", fill = "maroon3") +
labs(x = "Tenure", y = "Frequency", title = "Bar Chart of Tenure") +
theme_igray()
ggplotly(plot4)
=====================================#Clustering#========================================
#Principal Component Analysis
#We need to conduct PCA to reduce the dimensionality but maintain information as much as possible.
scaled.ccs = scale(ccs) #Scaling the data
ccs_pca <- prcomp(scaled.ccs)
ccs_pca
summary(ccs_pca)
=====================================#Clustering#========================================
#Principal Component Analysis
#We need to conduct PCA to reduce the dimensionality but maintain information as much as possible.
scaled.ccs = scale(ccs) #Scaling the data
ccs_pca <- prcomp(scaled.ccs)
=================================#Individual Data Plot Interpretation#===================
#Interpretation of BiPlot PC1 and PC2
fviz_pca_biplot(ccs_pca,
axes = c(1:2),
col.var = "orange",
col.ind = "royalblue",
labelsize = 3) +
theme_igray() +
labs(title = "Biplot of PC1 and PC2")
========================#Individual Data Plot Interpretation - Outlier#===================
#Checking the Outliers
fviz_pca_biplot(ccs_pca,
axes = c(1:2),
col.var = "orange",
col.ind = "red",
labelsize = 3,
select.ind = list(contrib = 5)) +
theme_igray() +
labs(title = "Outlier of PC1 and PC2")
